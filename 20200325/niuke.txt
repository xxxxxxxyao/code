//1.旋转数组求最小值
public class Solution {
    public int minNumberInRotateArray(int [] array) {
         if(array.length==0){
             return 0;
         }
        
        int i=0;
        int j=array.length-1;
        while(i<j){
            if(array[i]<array[j]){
                return array[i];
            }
            
            int mid=(i+j)>>1;
            if(array[mid]>array[i]){
                i=mid+1;
            }else if(array[mid]<array[j]){
                j=mid;
            }else{
                i++;
            }
        }
        return array[i];
    }
}



//2.变态跳台阶
public class Solution {
    public int JumpFloorII(int target) {
        if(target==0){
            return 0;
        }
        
        if(target==1){
            return 1;
        }else 
            return 2*JumpFloorII(target-1);
    }
}






//3.次方计算
import java.util.*;

public class Solution {
    public double Power(double base, int exponent) {
        if(base==0){
            return 0;
        }
        
        if(exponent==0){
            return 1;
        }
        
        double sum=1;
        int a=Math.abs(exponent);
        while(a>0){
            sum=sum*base;
            a--;
        }
        
        return exponent>0? sum:1/sum;
  }
}





//4.调整数组奇数偶数
import java.util.*;
public class Solution {
    public void reOrderArray(int [] array) {
       Stack<Integer> s=new Stack<>();
        for(int i=0;i<array.length;i++){
            if(array[i]%2 != 0){
                s.push(array[i]);
            }
        }
        
        for(int i=0;i<array.length;i++){
            if(array[i]%2 == 0){
                s.push(array[i]);
            }
        }
        
        for(int i=array.length-1;i>=0;i--){
            array[i]=s.peek();
            s.pop();
        }
    }
}




//5.数组数字超过一半的数
import java.util.*;
public class Solution {
    public int MoreThanHalfNum_Solution(int [] array) {
        Arrays.sort(array);
        int a=array.length/2;
        int count=0;
        for(int i=0;i<array.length;i++){
            if(array[a]==array[i]){
                count++;
            }
        }
        return count>a? array[a]:0;
    }
}





//6.整数1出现的次数
public class Solution {
    public int NumberOf1Between1AndN_Solution(int n) {
        int count=0;
        for(int i=1;i<=n;i++){
            int x=i;
            while(x!=0){
                int a=x%10;
                if(a==1){
                    count++;
                }
                x=x/10;
            }
        }
        return count;
    }
}


//7.最小栈
import java.util.*;

public class Solution {
    private Stack<Integer> s=new Stack<>();
    private Stack<Integer> ss=new Stack<>();
    
    public void push(int node) {
        s.push(node);
        
        if(ss.empty() || node<ss.peek()){
            ss.push(node);
        }
    }
    
    public void pop() {
        if(s.empty()){
            return;
        }
        
            int a=s.peek();
            if(ss.peek()==a){
                ss.pop();
            }
            s.pop();
    }
    
    
    public int top() {
        if(s.empty()){
            return -1;
        }
        
        return s.peek();
    }
    
    public int min() {
        return ss.peek();
    }
}




//8.反转单词序列
public class Solution {
    public String ReverseSentence(String str) {
        if(str==null||str.trim().equals(""))// trim掉多余空格
         return str;
        String[] arr=str.split(" ");
        StringBuilder s=new StringBuilder();
        
        for(int i=arr.length-1;i>=0;i--){
            if (i != 0){
              s.append(arr[i]);
              s.append(" ");
            }else{
                s.append(arr[i]);
            }
            
        }
        return s.toString();
    }
}