
//1.判断是否是树的子树


class Solution {
    public boolean issame(TreeNode r1,TreeNode r2){
         if(r1==null && r2==null){
            return true;
        }
        
        if(r1==null || r2==null){
            return false;
        }

       

        if(r1.val != r2.val){
            return false;
        }

        return issame(r1.left,r2.left) && issame(r1.right,r2.right);
    }
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if(s==null){
            return false;
        }

        if(t==null){
            return true;
        }

        if(issame(s,t)){
            return true;
        }

        return isSubtree(s.left,t) || isSubtree(s.right,t);
    }
}



//2.二叉树深度
public class Solution {
    public int TreeDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        
        int h1=TreeDepth(root.left);
        int h2=TreeDepth(root.right);
        
        return h1>h2?h1+1:h2+1;
    }
}




//3.判断二叉树是否是平衡二叉树
public class Solution {
    
    public int heigh(TreeNode r){
        if(r==null){
            return 0;
        }
        int h1=heigh(r.left);
        int h2=heigh(r.right);
        
        return h1>=h2?h1+1:h2+1;
        
    }
    public boolean IsBalanced_Solution(TreeNode root) {
        if(root==null){
            return true;
        }
        
        int h1=heigh(root.left);
        int h2=heigh(root.right);
        
        if(Math.abs(h1-h2)>1){
            return false;
        }
        
        return IsBalanced_Solution(root.left) && IsBalanced_Solution(root.right);
    }
}


//4.二叉搜索树的第k个节点
import java.util.*;
public class Solution {
   
    ArrayList<TreeNode> midorder(TreeNode r,ArrayList<TreeNode> l){
        if(r!=null){
            midorder(r.left,l);
            l.add(r);
            midorder(r.right,l);
        }
        return l;
    }
    TreeNode KthNode(TreeNode pRoot, int k)
    {
        if(pRoot==null){
            return null;
        }
        ArrayList<TreeNode> li=new ArrayList<>();
        ArrayList<TreeNode> l=midorder(pRoot,li);
        if(k<=0 || k>l.size()){
            return null;
        }
        return l.get(k-1);
    }
}