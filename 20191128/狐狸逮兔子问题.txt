#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#define OK 1
#define OVERFLOW -2

typedef int status;
typedef int ElemType;
#define LIST_INIT_SIZE 10     //线性表空间的初始分配量

typedef struct
{
	ElemType *elem;          //存储空间基址
	int length;              //当前长度
	int listsize;            //当前分配的存储容量
}SqList;


//构造线性表L
status InitList_Sq(SqList *L)
{
	(*L).elem = (ElemType *)malloc(LIST_INIT_SIZE*sizeof(ElemType));
	if (!((*L).elem))         //空间分配失败
		return OVERFLOW;
	(*L).length = 0;           //空表长度为0
	(*L).listsize = LIST_INIT_SIZE;    //初始存储容量
	return OK;
}


//逮兔子函数
status Rabbit(SqList *L)
{
	int i = 0;
	int current = 0;
	for (i = 0; i < LIST_INIT_SIZE; i++)
	{
		(*L).elem[i] = 1;           //给每个洞标记为1，表示狐狸未进洞
		(*L).elem[0] = 0;            //第一次进入第一个洞，标记为0
	}
	for (i = 2; i <= 1000; i++)
	{
		current = (current + i) % LIST_INIT_SIZE;   //实现顺序表的循环引用
		(*L).elem[current] = 0;                    //标记进过的洞为0
	}
	printf("\n可能藏的洞：");
	for (i = 0; i < LIST_INIT_SIZE; i++)
	{
		if ((*L).elem[i] == 1)
			printf("\n 第%d号洞", i+1);
	}
	return OK;
}



void main()
{
	SqList L;
	InitList_Sq(&L);
	Rabbit(&L);
	printf("\n");
	system("pause");
}